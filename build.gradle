plugins {
	id "java"
	id "maven"
	id "org.dm.bundle" version "0.8.2"
	id "nebula.provided-base" version "2.2.2"
}

group = "com.github.Wohra"
def projectName = "metrics-influxdb"
def description = "A reporter for metrics which announces measurements to an InfluxDB server."
version = "0.8.2-1"
println("version : '${version}'")

repositories {
	jcenter()
}

dependencies {
	provided 'io.dropwizard.metrics:metrics-core:3.1.2'
	compile 'org.slf4j:slf4j-api:1.7.7'

	testCompile 'junit:junit:4.12'
	testCompile 'org.hamcrest:hamcrest-all:1.3'
	testCompile 'org.easytesting:fest-assert-core:2.0M10'
	testCompile 'org.mockito:mockito-all:1.9.5'
	testCompile 'org.slf4j:slf4j-simple:1.7.7'
}

sourceCompatibility = JavaVersion.VERSION_1_7
targetCompatibility = JavaVersion.VERSION_1_7
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

task sourcesJar(type: Jar) {
	from sourceSets.main.allSource
	classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	from javadoc.destinationDir
	classifier = 'javadoc'
}

// add javadoc/source jar tasks as artifacts
artifacts {
	archives sourcesJar, javadocJar
}

task configureDeploy << {
	project.getTasksByName("deploy", false)*.configure {
		final String PARAMS_URL = "url"
		final String PARAMS_USER = "user"
		final String PARAMS_PASSWORD = "password"

		if (!project.hasProperty(PARAMS_URL)) {
			throw new GradleException("La propriété url doit exister et ne pas être vide.")
		}
		configuration = project.configurations.getByName("archives")

		repositories {
			mavenDeployer {
				repository(url: getProperty(PARAMS_URL)) {
					// On s'assure que le nom de l'artifact ne changera pas en fonction du nom du dossier
					pom.artifactId = projectName

					if (project.hasProperty(PARAMS_USER) && project.hasProperty(PARAMS_PASSWORD)) {
						authentication(userName: getProperty(PARAMS_USER), password: getProperty(PARAMS_PASSWORD))
					}
				}
			}
		}
	}
}

task deploy(type: Upload, dependsOn: ["jar", "sourcesJar", "javadocJar", "configureDeploy"])
